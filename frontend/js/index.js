document.addEventListener('DOMContentLoaded', function() {
  // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  const messagesContainer = document.getElementById('messagesContainer');
  const usernameInput = document.getElementById('usernameInput');
  const messageInput = document.getElementById('messageInput');
  const sendButton = document.getElementById('sendButton');
  const headerMenuButton = document.getElementById('headerMenuButton');
  const headerDropdown = document.getElementById('headerDropdown');
  const editNameOption = document.getElementById('editNameOption');
  const logoutOption = document.getElementById('logoutOption');
  const nameModal = document.getElementById('nameModal');
  const newNameInput = document.getElementById('newNameInput');
  const saveNameButton = document.getElementById('saveNameButton');
  const cancelNameButton = document.getElementById('cancelNameButton');
  const currentDateElement = document.getElementById('currentDate');

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const API_URL = 'http://localhost:4000';
  const POLLING_INTERVAL = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
  let lastMessageId = 0;
  let pollingTimeout;
  let lastClickedMessage = null;
  let activeDropdown = null;

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
  const today = new Date();
  const options = { day: 'numeric', month: 'short', year: 'numeric' };
  currentDateElement.textContent = today.toLocaleDateString('en-GB', options);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
  function saveUsername(username) {
    localStorage.setItem('chatUsername', username);
    usernameInput.value = username;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  function loadUsername() {
    const savedUsername = localStorage.getItem('chatUsername');
    if (savedUsername) {
      usernameInput.value = savedUsername;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  function formatMessageTime(timestamp) {
    const date = new Date(timestamp);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  function createMessageElement(message) {
    const messageElement = document.createElement('article');
    messageElement.className = 'message';
    messageElement.dataset.id = message.id;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–∏–º
    const currentUsername = usernameInput.value;
    if (message.username === currentUsername) {
      messageElement.classList.add('own');
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    let authorClass = '';
    if (message.username.toLowerCase() === 'junior') {
      authorClass = 'junior';
    } else if (message.username.toLowerCase() === 'senior') {
      authorClass = 'senior';
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageElement.innerHTML = `
            <div class="message-author ${authorClass}">${message.username}</div>
            <button class="message-control" data-id="${message.id}"></button>
            <div class="message-dropdown" id="dropdown-${message.id}">
                <div class="dropdown-item view-option">View</div>
                <div class="dropdown-item edit-option">Edit</div>
                <div class="dropdown-item delete delete-option">Delete</div>
                <div class="dropdown-item item-option last-item">Item</div>
            </div>
            <p class="message-text">${formatMessageText(message.text)}</p>
            <time>${formatMessageTime(message.timestamp)}</time>
        `;

    return messageElement;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Ç.–¥.)
  function formatMessageText(text) {
    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –Ω–∞ —ç–º–æ–¥–∑–∏
    const formattedText = text
        .replace(/:\)/g, 'üòä')
        .replace(/:\(/g, 'üòî')
        .replace(/:D/g, 'üòÅ')
        .replace(/;\)/g, 'üòâ')
        .replace(/<3/g, '‚ù§Ô∏è');

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–º–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–º–∞–π–ª–∏–∫–æ–≤

    return formattedText;
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
  function renderMessages(messages) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const isScrolledToBottom = messagesContainer.scrollHeight - messagesContainer.clientHeight <= messagesContainer.scrollTop + 10;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (const message of messages) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID
      const existingMessage = document.querySelector(`.message[data-id="${message.id}"]`);
      if (!existingMessage) {
        const messageElement = createMessageElement(message);
        messagesContainer.appendChild(messageElement);

        // –û–±–Ω–æ–≤–ª—è–µ–º lastMessageId
        if (message.id > lastMessageId) {
          lastMessageId = message.id;
        }
      }
    }

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–Ω–∏–∑—É –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (isScrolledToBottom) {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  function sendMessage() {
    const username = usernameInput.value.trim();
    const messageText = messageInput.value.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (username.length < 2 || username.length > 50) {
      alert('Username must be between 2 and 50 characters');
      return;
    }

    if (messageText.length < 1 || messageText.length > 500) {
      alert('Message must be between 1 and 500 characters');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveUsername(username);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = {
      username: username,
      text: messageText,
      timestamp: new Date().toISOString()
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch(`${API_URL}/messages`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(message)
    })
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to send message');
          }
          // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          messageInput.value = '';

          // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
          fetchMessages();
        })
        .catch(error => {
          console.error('Error sending message:', error);
          alert('Failed to send message. Please try again.');
        });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  function fetchMessages() {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (pollingTimeout) {
      clearTimeout(pollingTimeout);
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ ID
    fetch(`${API_URL}/messages?since=${lastMessageId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to fetch messages');
          }
          return response.json();
        })
        .then(messages => {
          if (messages.length > 0) {
            renderMessages(messages);
          }

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
          pollingTimeout = setTimeout(fetchMessages, POLLING_INTERVAL);
        })
        .catch(error => {
          console.error('Error fetching messages:', error);
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
          pollingTimeout = setTimeout(fetchMessages, POLLING_INTERVAL);
        });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
  function initChat() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUsername();

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    fetch(`${API_URL}/messages`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to fetch messages');
          }
          return response.json();
        })
        .then(messages => {
          renderMessages(messages);

          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          messagesContainer.scrollTop = messagesContainer.scrollHeight;

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞
          pollingTimeout = setTimeout(fetchMessages, POLLING_INTERVAL);
        })
        .catch(error => {
          console.error('Error initializing chat:', error);
          alert('Failed to load messages. Please refresh the page.');
        });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  sendButton.addEventListener('click', sendMessage);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  messageInput.addEventListener('keypress', function(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      sendMessage();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
  headerMenuButton.addEventListener('click', function(event) {
    event.stopPropagation();
    toggleDropdown(headerDropdown);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
  editNameOption.addEventListener('click', function() {
    newNameInput.value = usernameInput.value;
    nameModal.style.display = 'flex';
    closeAllDropdowns();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞
  logoutOption.addEventListener('click', function() {
    localStorage.removeItem('chatUsername');
    usernameInput.value = '';
    closeAllDropdowns();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
  saveNameButton.addEventListener('click', function() {
    const newName = newNameInput.value.trim();
    if (newName.length >= 2 && newName.length <= 50) {
      saveUsername(newName);
      nameModal.style.display = 'none';
    } else {
      alert('Username must be between 2 and 50 characters');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
  cancelNameButton.addEventListener('click', function() {
    nameModal.style.display = 'none';
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
  nameModal.addEventListener('click', function(event) {
    if (event.target === nameModal) {
      nameModal.style.display = 'none';
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è
  messagesContainer.addEventListener('click', function(event) {
    const controlButton = event.target.closest('.message-control');
    if (controlButton) {
      event.stopPropagation();
      const messageId = controlButton.dataset.id;
      const dropdown = document.getElementById(`dropdown-${messageId}`);
      toggleDropdown(dropdown);
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
  function toggleDropdown(dropdown) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–µ–Ω—é
    if (activeDropdown && activeDropdown !== dropdown) {
      activeDropdown.style.display = 'none';
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    if (dropdown.style.display === 'block') {
      dropdown.style.display = 'none';
      activeDropdown = null;
    } else {
      dropdown.style.display = 'block';
      activeDropdown = dropdown;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
  function closeAllDropdowns() {
    const dropdowns = document.querySelectorAll('.dropdown-menu, .message-dropdown');
    dropdowns.forEach(dropdown => {
      dropdown.style.display = 'none';
    });
    activeDropdown = null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –¥–ª—è –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏—è
  document.addEventListener('click', function(event) {
    if (!event.target.closest('.dropdown-menu') && !event.target.closest('.message-dropdown') &&
        !event.target.closest('.menu-button') && !event.target.closest('.message-control')) {
      closeAllDropdowns();
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
  initChat();
});